#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

# $Id: calc.y,v 1.4 2005/11/20 13:29:32 aamine Exp $

class Calcp < Racc::Parser

module_eval(<<'...end calc.y/module_eval...', 'calc.y', 166)

attr_accessor:q
attr_reader:funs

   def initialize
	@iden = []
	@funs = {}   
   end
   
   def append_fun_def(fun_def)
	@funs[fun_def[1]] = fun_def
   end
  
  def parse(str)
    @q = []
    @cmd_arg=[]
    flag = true
    until str.empty?
      case str
	when /\A\s+/
	when /\Adefine/
		@q.push [:DEFINE,$&]
	when /\A0[xX][a-fA-F0-9]+/
		@q.push [:NUMBER,$&.to_i(16)]
	when /\A[a-zA-Z_]+[a-zA-Z_0-9]*|\n/o
		s = $&
		@q.push [:NAME, s.to_sym]
	when /\A\d+/
		@q.push [:NUMBER, $&.to_i]
	when /\A>=/
		@q.push [:GREATEQ,$&]
	when /\A<=/
		@q.push [:LESSEQ,$&]
	when /\A==/
		@q.push [:EQUA,$&]
	when /\A!=/
		@q.push [:NO_EQ,$&]
	when /\A&&/
		@q.push [:LOGIC_AND,$&]
	when /\A\|\|/
		@q.push [:LOGIC_OR,$&]
	when /\A./
		@q.push [$&,$&]
	end

	if flag
		if $& == "("
			cmd_arg_start = true
		elsif $& == ")"
			cmd_arg_start = false
			flag = false
		end
		
		if cmd_arg_start
			if ["+","-","*","/","%","&&","&","==","|","||",">",">=","<","<=",":","?"].include? $&
				@cmd_arg = []
				flag = false
			elsif ($& == "("  and @cmd_arg.include? "(")
				@cmd_arg = []
				flag = false
			else
				@cmd_arg << $&
			end
		end
	end
      str = $'
    end
    @q.push [false, '$end']
    do_parse
  end

  def next_token
	tmp = @q.shift
	@iden<<tmp
	tmp
  end

...end calc.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    11,    12,    13,    65,     9,    10,    14,    21,    28,    16,
    15,    17,    18,    19,    22,    23,    20,    27,    24,    68,
    51,    79,    69,    52,    11,    12,    13,    25,     9,    10,
    14,    21,     8,    16,    15,    17,    18,    19,    22,    23,
    20,    81,    24,    61,    73,    72,    62,    74,    11,    12,
    13,    58,     9,    10,    14,    21,   nil,    16,    15,    17,
    18,    19,    22,    23,    20,   nil,    24,    75,    66,   nil,
    76,    67,    11,    12,    13,   nil,     9,    10,    14,    21,
   nil,    16,    15,    17,    18,    19,    22,    23,    20,   nil,
    24,   nil,    59,   nil,   nil,    60,    11,    12,    13,   nil,
     9,    10,    14,    21,   nil,    16,    15,    17,    18,    19,
    22,    23,    20,   nil,    24,   nil,    80,    11,    12,    13,
   nil,     9,    10,    14,    21,   nil,    16,    15,    17,    18,
    19,    22,    23,    20,   nil,    24,   nil,    47,    11,    12,
    13,   nil,     9,    10,    14,    21,   nil,    16,    15,    17,
    18,    19,    22,    23,    20,   nil,    24,    11,    12,    13,
   nil,     9,    10,    14,    21,   nil,    16,    15,    17,    18,
    19,    22,    23,    20,   nil,    24,    11,    12,    13,   nil,
     9,    10,    14,    21,   nil,    16,    15,    17,    18,    19,
    22,    23,    20,   nil,    24,    11,    12,    13,   nil,     9,
    10,    14,    21,   nil,    16,    15,    17,    18,    19,    22,
    23,    20,   nil,    24,    11,    12,    13,   nil,     9,    10,
    14,    21,   nil,    16,    15,    17,    18,    19,    22,    23,
    20,    49,    24,    11,    12,    13,   nil,     9,    10,    14,
    21,   nil,    16,    15,    17,    18,    19,    22,    23,    20,
   nil,    24,    11,    12,    13,   nil,     9,    10,    14,    21,
   nil,    16,    15,    17,    18,    19,    22,    23,    20,   nil,
    24,    11,    12,    13,   nil,     9,    10,    14,    21,   nil,
    16,    15,    17,    18,    19,    22,    23,    20,   nil,    24,
    11,    12,    13,   nil,     9,    10,    14,    21,   nil,    16,
    15,    17,    18,    19,    22,    23,    20,    11,    12,    13,
   nil,     9,    10,    14,    21,    11,    12,    13,   nil,     9,
    10,    14,    21,    11,    12,    13,   nil,     9,    10,    14,
    21,    11,    12,    13,   nil,     9,    10,    14,    21,    11,
    12,    13,   nil,     9,    10,    14,    21,    11,    12,    13,
   nil,     9,    10,    14,    21,    11,    12,    13,   nil,     9,
    10,    14,    21,    11,    12,    13,   nil,     9,    10,    14,
    21,     5,     5,   nil,     7,     7,     6,     6,     5,     5,
   nil,     7,     7,     6,     6,     5,   nil,   nil,     7,   nil,
     6,    11,    12,    13,     5,     9,    10,     7,     5,     6,
   nil,     7,     5,     6,   nil,     7,     5,     6,   nil,     7,
     5,     6,   nil,     7,     5,     6,   nil,     7,   nil,     6,
    11,    12,    13,     5,     9,    10,     7,     5,     6,   nil,
     7,     5,     6,   nil,     7,     5,     6,   nil,     7,     5,
     6,   nil,    50,     5,     6,   nil,     7,     5,     6,   nil,
     7,     5,     6,   nil,     7,     5,     6,   nil,     7,     5,
     6,   nil,     7,     5,     6,   nil,     7,     5,     6,   nil,
     7,     5,     6,   nil,     7,     5,     6,   nil,     7,     5,
     6,   nil,     7,     5,     6,   nil,     7,    46,     6,   nil,
     7,     5,     6,   nil,     7,     5,     6,   nil,     7,     5,
     6,     4,     7,   nil,     6,    27,    54,   nil,   nil,    55,
    11,    12,    13,    11,    12,    13 ]

racc_action_check = [
    48,    48,    48,    62,    48,    48,    48,    48,     8,    48,
    48,    48,    48,    48,    48,    48,    48,     7,    48,    65,
    48,    76,    65,    48,    70,    70,    70,     4,    70,    70,
    70,    70,     1,    70,    70,    70,    70,    70,    70,    70,
    70,    79,    70,    58,    70,    69,    58,    70,    63,    63,
    63,    55,    63,    63,    63,    63,   nil,    63,    63,    63,
    63,    63,    63,    63,    63,   nil,    63,    72,    63,   nil,
    72,    63,    56,    56,    56,   nil,    56,    56,    56,    56,
   nil,    56,    56,    56,    56,    56,    56,    56,    56,   nil,
    56,   nil,    56,   nil,   nil,    56,    77,    77,    77,   nil,
    77,    77,    77,    77,   nil,    77,    77,    77,    77,    77,
    77,    77,    77,   nil,    77,   nil,    77,    26,    26,    26,
   nil,    26,    26,    26,    26,   nil,    26,    26,    26,    26,
    26,    26,    26,    26,   nil,    26,   nil,    26,    64,    64,
    64,   nil,    64,    64,    64,    64,   nil,    64,    64,    64,
    64,    64,    64,    64,    64,   nil,    64,    71,    71,    71,
   nil,    71,    71,    71,    71,   nil,    71,    71,    71,    71,
    71,    71,    71,    71,   nil,    71,    57,    57,    57,   nil,
    57,    57,    57,    57,   nil,    57,    57,    57,    57,    57,
    57,    57,    57,   nil,    57,     3,     3,     3,   nil,     3,
     3,     3,     3,   nil,     3,     3,     3,     3,     3,     3,
     3,     3,   nil,     3,    44,    44,    44,   nil,    44,    44,
    44,    44,   nil,    44,    44,    44,    44,    44,    44,    44,
    44,    44,    44,    78,    78,    78,   nil,    78,    78,    78,
    78,   nil,    78,    78,    78,    78,    78,    78,    78,    78,
   nil,    78,    45,    45,    45,   nil,    45,    45,    45,    45,
   nil,    45,    45,    45,    45,    45,    45,    45,    45,   nil,
    45,    82,    82,    82,   nil,    82,    82,    82,    82,   nil,
    82,    82,    82,    82,    82,    82,    82,    82,   nil,    82,
    53,    53,    53,   nil,    53,    53,    53,    53,   nil,    53,
    53,    53,    53,    53,    53,    53,    53,    38,    38,    38,
   nil,    38,    38,    38,    38,    40,    40,    40,   nil,    40,
    40,    40,    40,    39,    39,    39,   nil,    39,    39,    39,
    39,    42,    42,    42,   nil,    42,    42,    42,    42,    37,
    37,    37,   nil,    37,    37,    37,    37,    36,    36,    36,
   nil,    36,    36,    36,    36,    35,    35,    35,   nil,    35,
    35,    35,    35,    43,    43,    43,   nil,    43,    43,    43,
    43,    61,    24,   nil,    61,    24,    61,    24,    27,    81,
   nil,    27,    81,    27,    81,    75,   nil,   nil,    75,   nil,
    75,    34,    34,    34,    23,    34,    34,    23,    22,    23,
   nil,    22,    21,    22,   nil,    21,    20,    21,   nil,    20,
    19,    20,   nil,    19,    18,    19,   nil,    18,   nil,    18,
    41,    41,    41,    17,    41,    41,    17,    16,    17,   nil,
    16,    15,    16,   nil,    15,    14,    15,   nil,    14,    46,
    14,   nil,    46,    13,    46,   nil,    13,    49,    13,   nil,
    49,    74,    49,   nil,    74,    52,    74,   nil,    52,    12,
    52,   nil,    12,    54,    12,   nil,    54,    67,    54,   nil,
    67,    11,    67,   nil,    11,    10,    11,   nil,    10,     5,
    10,   nil,     5,    60,     5,   nil,    60,    25,    60,   nil,
    25,    68,    25,   nil,    68,     9,    68,   nil,     9,     0,
     9,     0,     0,   nil,     0,    50,    50,   nil,   nil,    50,
    29,    29,    29,    30,    30,    30 ]

racc_action_pointer = [
   477,    32,   nil,   192,     2,   457,   nil,    -5,     8,   473,
   453,   449,   437,   421,   413,   409,   405,   401,   392,   388,
   384,   380,   376,   372,   350,   465,   114,   356,   nil,   507,
   510,   nil,   nil,   nil,   388,   352,   344,   336,   304,   320,
   312,   417,   328,   360,   211,   249,   417,   nil,    -3,   425,
   483,   nil,   433,   287,   441,    26,    69,   173,    20,   nil,
   461,   349,   -22,    45,   135,    -4,   nil,   445,   469,    20,
    21,   154,    44,   nil,   429,   363,    -4,    93,   230,    18,
   nil,   357,   268 ]

racc_action_default = [
    -3,   -34,    -1,    -2,   -34,   -34,   -27,   -28,   -34,   -34,
   -34,   -34,   -34,   -34,   -34,   -34,   -34,   -34,   -34,   -34,
   -34,   -34,   -34,   -34,   -34,   -34,   -34,   -34,    83,   -10,
   -11,   -12,   -13,   -14,   -15,   -16,   -17,   -18,   -19,   -20,
   -21,   -22,   -23,   -24,   -34,    -4,   -34,   -26,   -34,   -34,
   -28,   -29,   -34,   -25,   -34,   -34,   -34,    -5,   -34,   -30,
   -34,   -34,   -34,   -34,    -6,   -34,   -31,   -34,   -34,   -34,
   -34,    -7,   -34,   -32,   -34,   -34,   -34,   -34,    -8,   -34,
   -33,   -34,    -9 ]

racc_goto_table = [
     3,     2,     1,   nil,   nil,   nil,   nil,   nil,   nil,    29,
    30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
    40,    41,    42,    43,    44,    45,   nil,    48,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    53,
   nil,   nil,    56,   nil,    57,   nil,   nil,   nil,   nil,   nil,
    63,    64,   nil,   nil,   nil,   nil,   nil,    70,    71,   nil,
   nil,   nil,   nil,   nil,    77,    78,   nil,   nil,   nil,   nil,
   nil,    82 ]

racc_goto_check = [
     3,     2,     1,   nil,   nil,   nil,   nil,   nil,   nil,     3,
     3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,   nil,     3,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     3,
   nil,   nil,     3,   nil,     3,   nil,   nil,   nil,   nil,   nil,
     3,     3,   nil,   nil,   nil,   nil,   nil,     3,     3,   nil,
   nil,   nil,   nil,   nil,     3,     3,   nil,   nil,   nil,   nil,
   nil,     3 ]

racc_goto_pointer = [
   nil,     2,     1,     0 ]

racc_goto_default = [
   nil,   nil,   nil,    26 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 29, :_reduce_1,
  1, 29, :_reduce_2,
  0, 29, :_reduce_3,
  3, 30, :_reduce_4,
  6, 30, :_reduce_5,
  8, 30, :_reduce_6,
  10, 30, :_reduce_7,
  12, 30, :_reduce_8,
  14, 30, :_reduce_9,
  3, 31, :_reduce_10,
  3, 31, :_reduce_11,
  3, 31, :_reduce_12,
  3, 31, :_reduce_13,
  3, 31, :_reduce_14,
  3, 31, :_reduce_15,
  3, 31, :_reduce_16,
  3, 31, :_reduce_17,
  3, 31, :_reduce_18,
  3, 31, :_reduce_19,
  3, 31, :_reduce_20,
  3, 31, :_reduce_21,
  3, 31, :_reduce_22,
  3, 31, :_reduce_23,
  3, 31, :_reduce_24,
  5, 31, :_reduce_25,
  3, 31, :_reduce_26,
  1, 31, :_reduce_27,
  1, 31, :_reduce_28,
  4, 31, :_reduce_29,
  6, 31, :_reduce_30,
  8, 31, :_reduce_31,
  10, 31, :_reduce_32,
  12, 31, :_reduce_33 ]

racc_reduce_n = 34

racc_shift_n = 83

racc_token_table = {
  false => 0,
  :error => 1,
  :UMINUS => 2,
  "*" => 3,
  "/" => 4,
  "%" => 5,
  "^" => 6,
  "+" => 7,
  "-" => 8,
  "&" => 9,
  "|" => 10,
  "~" => 11,
  "<" => 12,
  ">" => 13,
  :GREATEQ => 14,
  :LESSEQ => 15,
  :EQUA => 16,
  :LOGIC_AND => 17,
  :LOGIC_OR => 18,
  :NO_EQ => 19,
  ":" => 20,
  "?" => 21,
  "(" => 22,
  ")" => 23,
  :DEFINE => 24,
  :NAME => 25,
  "," => 26,
  :NUMBER => 27 }

racc_nt_base = 28

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "UMINUS",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"^\"",
  "\"+\"",
  "\"-\"",
  "\"&\"",
  "\"|\"",
  "\"~\"",
  "\"<\"",
  "\">\"",
  "GREATEQ",
  "LESSEQ",
  "EQUA",
  "LOGIC_AND",
  "LOGIC_OR",
  "NO_EQ",
  "\":\"",
  "\"?\"",
  "\"(\"",
  "\")\"",
  "DEFINE",
  "NAME",
  "\",\"",
  "NUMBER",
  "$start",
  "target",
  "macro_def",
  "exp" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'calc.y', 17)
  def _reduce_1(val, _values, result)
    		@iden.clear
		append_fun_def(val[0])
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 22)
  def _reduce_2(val, _values, result)
    		@iden.clear
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 26)
  def _reduce_3(val, _values, result)
    		result = 0 
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 33)
  def _reduce_4(val, _values, result)
    		result = [:def,val[1], [:arg],val[2]]
	
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 38)
  def _reduce_5(val, _values, result)
    		result = [:def, val[1], [:arg,val[3]],val[5]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 42)
  def _reduce_6(val, _values, result)
    		result = [:def, val[1], [:arg,val[3],val[5]], val[7]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 46)
  def _reduce_7(val, _values, result)
    		result = [:def, val[1], [:arg,val[3],val[5], val[7]],val[9]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 50)
  def _reduce_8(val, _values, result)
    		result = [:def, val[1], [:arg,val[3],val[5], val[7],val[9]],val[11]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 54)
  def _reduce_9(val, _values, result)
    		result = [:def, val[1], [:arg,val[3],val[5], val[7],val[9],val[11]],val[13]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 59)
  def _reduce_10(val, _values, result)
    		result = [:add,val[0],val[2]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 63)
  def _reduce_11(val, _values, result)
    		result = [:sub,val[0],val[2]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 67)
  def _reduce_12(val, _values, result)
    		result = [:mul,val[0],val[2]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 71)
  def _reduce_13(val, _values, result)
    		result = [:div,val[0],val[2]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 75)
  def _reduce_14(val, _values, result)
    		result = [:mod,val[0],val[2]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 79)
  def _reduce_15(val, _values, result)
    		result = [:bitand,val[0],val[2]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 83)
  def _reduce_16(val, _values, result)
    		result = [:>,val[0],val[2]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 87)
  def _reduce_17(val, _values, result)
    		result = [:<,val[0],val[2]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 91)
  def _reduce_18(val, _values, result)
    		result = [:ge,val[0],val[2]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 95)
  def _reduce_19(val, _values, result)
    		result = [:le,val[0],val[2]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 99)
  def _reduce_20(val, _values, result)
    		result = [:eq,val[0],val[2]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 103)
  def _reduce_21(val, _values, result)
    		result = [:no_eq,val[0],val[2]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 107)
  def _reduce_22(val, _values, result)
    		result = [:bitor, val[0],val[2]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 111)
  def _reduce_23(val, _values, result)
    		result = [:logic_and,val[0],val[2]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 115)
  def _reduce_24(val, _values, result)
    		result = [:logic_or,val[0],val[2]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 119)
  def _reduce_25(val, _values, result)
    		result = [:orand3,val[0],val[2],val[4]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 123)
  def _reduce_26(val, _values, result)
    		result = val[1]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 127)
  def _reduce_27(val, _values, result)
    		result = [:lit,val[0]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 131)
  def _reduce_28(val, _values, result)
    			if @cmd_arg.include? val[0].to_s
				result = [:val,val[0]]
			else
				result = [:call,val[0],[:arg]]
			end
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 139)
  def _reduce_29(val, _values, result)
    		result = [:call, val[0], [:arg, val[2]]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 143)
  def _reduce_30(val, _values, result)
    		result = [:call, val[0], [:arg, val[2], val[4]]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 147)
  def _reduce_31(val, _values, result)
    		result = [:call, val[0], [:arg, val[2], val[4],val[6]]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 151)
  def _reduce_32(val, _values, result)
    		result = [:call, val[0], [:arg, val[2], val[4],val[6],val[8]]]
	
    result
  end
.,.,

module_eval(<<'.,.,', 'calc.y', 155)
  def _reduce_33(val, _values, result)
    		result = [:call, val[0], [:arg, val[2], val[4],val[6],val[8],val[10]]]
	
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Calcp


$funs = {}
class Executer
	
	def initialize(call_def)
		@paras={}
		@call_def = call_def
		@fun_def =$funs[call_def[1]]
	
		args_name =@fun_def[2][1..-1]
		args_value = call_def[2][1..-1]
	
		return nil unless args_name.length == args_value.length

		args_name.each_index {|i| 
			@paras[args_name[i]] = eval(args_value[i])
		}
	end
	private
	def pre_process(arr)
			return nil unless Array === arr
			arr.each_index do |i|
				case arr[i]
					when :val
					@paras.each{|k,v| 
							if arr[i+1] == k
								arr[i] = :lit
								arr[i+1]=v
							end
						}
					break
					when Array
					pre_process(arr[i])
				end
			end
			
	end
	public	
	def eval(exp)
		return nil unless exp
		return nil unless Array === exp

		case exp[0]
			when :lit
				return exp[1]
			when :add
				return eval(exp[1]) + eval(exp[2])
			when :sub
				return  eval(exp[1]) -  eval(exp[2])
			when :mul
				return  eval(exp[1])  *  eval(exp[2]) 
			when :div 
				return  eval(exp[1])  /  eval(exp[2]) 
			when :bitand
				return  eval(exp[1])  &  eval(exp[2]) 
			when :mod
				return eval(exp[1]) % eval(exp[2])
			when :bitor
				return  eval(exp[1])  |  eval(exp[2]) 
			when :>
				return  (eval(exp[1])  >  eval(exp[2]))
			when :<
				return  (eval(exp[1])  <  eval(exp[2])) 
			when :ge
				return  (eval(exp[1])  >=  eval(exp[2])) 
			when :le
				return  (eval(exp[1])  <=  eval(exp[2])) 
			when :eq
				return  (eval(exp[1])  ==  eval(exp[2])) 
			when :no_eq
				return (eval(exp[1]) != eval(exp[2])) 
			when :logic_and
				return  eval(exp[1]) && eval(exp[2])
			when :logic_or
				return  eval(exp[1]) || eval(exp[2])
			when :orand3
				val = eval(exp[1])
				case val
					when Fixnum
						return  (val == 0) ? eval(exp[3]) : eval(exp[2])
					when true,false
						return  val  ? eval(exp[2])  : eval(exp[3])
				end
			when :call
				return  Executer.new(exp).exe
		end
		
	end
	public
	def exe

		tmp = Marshal.load(Marshal.dump(@fun_def))
		pre_process(tmp)
		
		return  eval(tmp[3])
	
	end
end

class MacroParser
	def initialize
		@parser = Calcp.new
		$funs.clear
	end
	
	def parse(str_exp)
		case str_exp
			when  /\A\s*define\s+([a-zA-Z_]+\w*)\s+\(([a-zA-Z_]+\w*)\)\s*\Z/
				@parser.funs[$1.to_sym] =  [:def, $1.to_sym, [:arg],[:call,$2.to_sym,[:arg]]]
			else
				@parser.parse(str_exp)
		end

	end
	
	def split_parse(str,splitter=";")
		str.split(splitter).each do |i|
			parse(i)
		end
		
	end
	
	def exe(str_exe)
		fun_def = @parser.parse(str_exe)
		$funs = @parser.funs
		Executer.new(fun_def).exe
	end
	
	def show
		@parser.funs.each do |i|
			p i
		end
	end
end
